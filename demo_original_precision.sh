#!/bin/bash

echo "=========================================="
echo "  价格原始精度保留演示"
echo "=========================================="
echo ""

echo "✨ 最终方案: 保留原始精度"
echo ""
echo "系统现在会完整保留价格的原始精度,自动去除尾部无意义的0"
echo ""

echo "=========================================="
echo "  核心原理"
echo "=========================================="
echo ""

echo "1. 使用足够高的精度(10-12位)格式化价格"
echo "2. 自动去除尾部的0和小数点"
echo "3. 保留原始数据的真实精度"
echo ""

cat <<'EOF'
示例:
  原始价格: 0.18452  (5位小数)
  格式化:   0.1845200000 (10位)
  去除尾0:  0.18452 ✅ (保留原始5位)

  原始价格: 3929.05 (2位小数)
  格式化:   3929.0500000000 (10位)
  去除尾0:  3929.05 ✅ (保留原始2位)

  原始价格: 0.1234567890 (10位小数)
  格式化:   0.1234567890 (10位)
  去除尾0:  0.123456789 ✅ (保留原始10位)
EOF

echo ""
echo ""
echo "=========================================="
echo "  各币种显示示例"
echo "=========================================="
echo ""

echo "BTC (假设价格: 67850.25):"
echo "  原始精度: 67850.25 (2位小数)"
echo "  显示结果: \$67850.25 ✅"
echo ""

echo "ETH (假设价格: 3929.0523):"
echo "  原始精度: 3929.0523 (4位小数)"
echo "  显示结果: \$3929.0523 ✅"
echo ""

echo "DOGE (假设价格: 0.18452):"
echo "  原始精度: 0.18452 (5位小数)"
echo "  显示结果: \$0.18452 ✅"
echo ""

echo "DOGE (假设价格: 0.184):"
echo "  原始精度: 0.184 (3位小数)"
echo "  显示结果: \$0.184 ✅"
echo ""

echo "SHIB (假设价格: 0.00123456):"
echo "  原始精度: 0.00123456 (8位小数)"
echo "  显示结果: \$0.00123456 ✅"
echo ""

echo "PEPE (假设价格: 0.00001234567):"
echo "  原始精度: 0.00001234567 (11位小数)"
echo "  显示结果: \$0.00001234567 ✅"
echo ""

echo "=========================================="
echo "  关键优势"
echo "=========================================="
echo ""

echo "✅ 保留原始精度"
echo "   - 不会添加额外的0"
echo "   - 不会截断有效数字"
echo "   - 显示与数据源一致"
echo ""

echo "✅ 自动去除无意义的0"
echo "   - 0.1845000000 → 0.18452"
echo "   - 3929.0500 → 3929.05"
echo "   - 67850.00 → 67850"
echo ""

echo "✅ 适配所有精度"
echo "   - 2位小数: 67850.25"
echo "   - 5位小数: 0.18452"
echo "   - 10位小数: 0.1234567890"
echo "   - 任意位数都能正确显示"
echo ""

echo "=========================================="
echo "  技术实现"
echo "=========================================="
echo ""

cat <<'EOF'
func formatPrice(price float64) string {
    if price >= 1000 {
        // 大价格: 保留10位精度
        str := fmt.Sprintf("%.10f", price)
        // 去除尾部的0和小数点
        return strings.TrimRight(strings.TrimRight(str, "0"), ".")
    } else if price >= 0.01 {
        // 中小价格: 保留10位精度
        str := fmt.Sprintf("%.10f", price)
        return strings.TrimRight(strings.TrimRight(str, "0"), ".")
    } else {
        // 极小价格: 保留12位精度
        str := fmt.Sprintf("%.12f", price)
        return strings.TrimRight(strings.TrimRight(str, "0"), ".")
    }
}
EOF

echo ""
echo ""
echo "=========================================="
echo "  工作流程示例"
echo "=========================================="
echo ""

echo "DOGE价格: 0.18452"
echo ""
echo "步骤1: fmt.Sprintf(\"%.10f\", 0.18452)"
echo "       → \"0.1845200000\""
echo ""
echo "步骤2: TrimRight(str, \"0\")"
echo "       → \"0.18452\""
echo ""
echo "步骤3: TrimRight(str, \".\")"
echo "       → \"0.18452\" (没有小数点要去除)"
echo ""
echo "最终结果: \$0.18452 ✅ 完美保留5位精度"
echo ""

echo "=========================================="
echo "  对比: 固定精度 vs 原始精度"
echo "=========================================="
echo ""

cat <<'EOF'
价格          固定6位          原始精度
---------------------------------------------
0.18452      0.184520        0.18452  ✅
0.184        0.184000        0.184    ✅
0.18         0.180000        0.18     ✅
3929.05      ERROR           3929.05  ✅
67850.25     ERROR           67850.25 ✅

优势:
  - 原始精度方案适用于所有价格范围
  - 不会显示无意义的0
  - 完整保留数据的真实精度
EOF

echo ""
echo ""
echo "=========================================="
echo "  实际测试"
echo "=========================================="
echo ""

echo "运行以下命令查看实际效果:"
echo ""
echo "  ./aitrading              # 观察不同币种保留的原始精度"
echo "  ./aitrading order        # 查看仓位价格的原始精度"
echo ""

echo "预期效果:"
echo "  - DOGE如果是5位,显示: \$0.18452"
echo "  - DOGE如果是3位,显示: \$0.184"
echo "  - DOGE如果是10位,显示: \$0.1845234567"
echo "  - 始终与数据源保持一致"
echo ""

echo "=========================================="
echo "  常见问题"
echo "=========================================="
echo ""

echo "Q: 为什么不用%g格式?"
echo "A: %g会对大数字使用科学计数法,不适合价格显示"
echo "   例如: 67850.25 可能显示为 6.785025e+04"
echo ""

echo "Q: 10位精度够用吗?"
echo "A: 对于绝大多数加密货币足够"
echo "   极小价格(<0.01)使用12位精度"
echo "   可以覆盖几乎所有情况"
echo ""

echo "Q: 如果数据源精度超过12位?"
echo "A: 可以增加精度位数,但通常不需要"
echo "   加密货币交易所很少提供超过12位精度"
echo ""
